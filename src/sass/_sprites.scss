/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$arrow-name: 'arrow';
$arrow-x: 451px;
$arrow-y: 0px;
$arrow-offset-x: -451px;
$arrow-offset-y: 0px;
$arrow-width: 112px;
$arrow-height: 183px;
$arrow-total-width: 563px;
$arrow-total-height: 456px;
$arrow-image: '../images/sprite.png';
$arrow: (451px, 0px, -451px, 0px, 112px, 183px, 563px, 456px, '../images/sprite.png', 'arrow', );
$books-name: 'books';
$books-x: 0px;
$books-y: 290px;
$books-offset-x: 0px;
$books-offset-y: -290px;
$books-width: 110px;
$books-height: 166px;
$books-total-width: 563px;
$books-total-height: 456px;
$books-image: '../images/sprite.png';
$books: (0px, 290px, 0px, -290px, 110px, 166px, 563px, 456px, '../images/sprite.png', 'books', );
$how-1-name: 'how-1';
$how-1-x: 151px;
$how-1-y: 0px;
$how-1-offset-x: -151px;
$how-1-offset-y: 0px;
$how-1-width: 150px;
$how-1-height: 151px;
$how-1-total-width: 563px;
$how-1-total-height: 456px;
$how-1-image: '../images/sprite.png';
$how-1: (151px, 0px, -151px, 0px, 150px, 151px, 563px, 456px, '../images/sprite.png', 'how-1', );
$how-2-name: 'how-2';
$how-2-x: 0px;
$how-2-y: 0px;
$how-2-offset-x: 0px;
$how-2-offset-y: 0px;
$how-2-width: 151px;
$how-2-height: 152px;
$how-2-total-width: 563px;
$how-2-total-height: 456px;
$how-2-image: '../images/sprite.png';
$how-2: (0px, 0px, 0px, 0px, 151px, 152px, 563px, 456px, '../images/sprite.png', 'how-2', );
$how-3-name: 'how-3';
$how-3-x: 301px;
$how-3-y: 0px;
$how-3-offset-x: -301px;
$how-3-offset-y: 0px;
$how-3-width: 150px;
$how-3-height: 150px;
$how-3-total-width: 563px;
$how-3-total-height: 456px;
$how-3-image: '../images/sprite.png';
$how-3: (301px, 0px, -301px, 0px, 150px, 150px, 563px, 456px, '../images/sprite.png', 'how-3', );
$logotype-name: 'logotype';
$logotype-x: 159px;
$logotype-y: 152px;
$logotype-offset-x: -159px;
$logotype-offset-y: -152px;
$logotype-width: 148px;
$logotype-height: 52px;
$logotype-total-width: 563px;
$logotype-total-height: 456px;
$logotype-image: '../images/sprite.png';
$logotype: (159px, 152px, -159px, -152px, 148px, 52px, 563px, 456px, '../images/sprite.png', 'logotype', );
$megafon-name: 'megafon';
$megafon-x: 0px;
$megafon-y: 152px;
$megafon-offset-x: 0px;
$megafon-offset-y: -152px;
$megafon-width: 159px;
$megafon-height: 138px;
$megafon-total-width: 563px;
$megafon-total-height: 456px;
$megafon-image: '../images/sprite.png';
$megafon: (0px, 152px, 0px, -152px, 159px, 138px, 563px, 456px, '../images/sprite.png', 'megafon', );
$ozon-name: 'ozon';
$ozon-x: 159px;
$ozon-y: 204px;
$ozon-offset-x: -159px;
$ozon-offset-y: -204px;
$ozon-width: 177px;
$ozon-height: 26px;
$ozon-total-width: 563px;
$ozon-total-height: 456px;
$ozon-image: '../images/sprite.png';
$ozon: (159px, 204px, -159px, -204px, 177px, 26px, 563px, 456px, '../images/sprite.png', 'ozon', );
$spritesheet-width: 563px;
$spritesheet-height: 456px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($arrow, $books, $how-1, $how-2, $how-3, $logotype, $megafon, $ozon, );
$spritesheet: (563px, 456px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
